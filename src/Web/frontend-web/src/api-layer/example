import HttpServiceConfig from "../configs/HttpServiceConfig";

class ExampleService {
  get = (queryParam = {}, config = {}) => {
    let queryPath = '';
    const queryValueArray = [];
    for (const [key, valueObj] of Object.entries(queryParam)) {
      if ((valueObj || valueObj === 0) && valueObj !== '') {
        queryValueArray.push(`${key}=${valueObj}`);
      }
    }
    if (queryValueArray.length > 0) {
      queryPath = queryValueArray.join('&');
    }
    return new Promise((resolve, reject) => {
      HttpServiceConfig.get(`/get?${queryPath}`, config)
        .then((data) => {
          resolve(data);
        })
        .catch((error) => {
          reject(error);
        });
    });
  };

  create = (req, headers = {}) => {
    const formattedReq = {
    };
    return new Promise((resolve, reject) => {
        HttpServiceConfig.post('/post', formattedReq, headers)
        .then((data) => {
          resolve(data);
        })
        .catch((error) => {
          reject(error);
        });
    });
  };

  update = (id, req, headers = {}) => {
    const formattedReq = {

    };
    return new Promise((resolve, reject) => {
        HttpServiceConfig.put(`/update/${id}`, formattedReq, headers)
        .then((data) => {
          resolve(data);
        })
        .catch((error) => {
          reject(error);
        });
    });
  };

  getById = (id, headers = {}) => {
    return new Promise((resolve, reject) => {
        HttpServiceConfig.get(`/getbyid/${id}`, headers)
        .then((data) => {
          resolve(data);
        })
        .catch((error) => {
          reject(error);
        });
    });
  };
}

export default new ExampleService();